# models.py
from typing import Dict, Any
from pydantic import BaseModel, Field


class AgentWorkflow(BaseModel):
    """
    Represents the workflow details for an agent, including its name
    and the tools it has invoked during task execution.
    """

    agent_name: str = Field(
        description="The unique identifier or name of the agent involved in the workflow."
    )
    tool_calls: Dict[str, Any] = Field(
        description=(
            "A dictionary representing all tool invocations made by the agent. "
            "Each key corresponds to the tool name or identifier, and the value "
            "contains the specific parameters or metadata used during the call."
        )
    )


class AgentResponseOutput(BaseModel):
    """
    Captures the output of an individual agent including the textual response
    and the corresponding workflow that generated it.
    """

    response: str = Field(
        description="The generated response or message from the agent."
    )
    agent_workflow: AgentWorkflow = Field(
        description="The detailed workflow, including tool usage, that led to this response."
    )


class FinalResponseOutput(BaseModel):
    """
    Aggregates a team-level response, typically involving orchestration across multiple agents.
    """

    response: str = Field(
        description="The collective or final response from the team of agents."
    )
    source_agent_response: str = Field(
        description="The raw response generated by the originating agent within the workflow."
    )
    agent_workflow: AgentWorkflow = Field(
        description="The originating agent's workflow including its name and tool calls."
    )


class PersonalityLayerResponse(BaseModel):
    """
    Represents the final response from the team, including the aggregated response
    and the workflow details.
    """

    response: str = Field(
        description="This will be the final output from the personality AI agent."
    )
